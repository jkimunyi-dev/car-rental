### Variables
@baseUrl = http://localhost:3000/api
@accessToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWNnbnVxYnkwMDAwOXp6aXdzZWdhcWxsIiwiaWF0IjoxNzUxMTQwNzU4LCJleHAiOjE3NTExNDQzNTh9.r4rgRoRdmW4Ldz75pkbSM3FJ_UDoO0ARFhoksTfx57Q
@refreshToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWNnbnVxYnkwMDAwOXp6aXdzZWdhcWxsIiwiaWF0IjoxNzUxMTQwNzU4LCJleHAiOjE3NTE3NDU1NTh9.3965EjoBymK5TicTxGp5BDOuGMnL0H2m3tSjr4BKcVM
@resetToken = 
@adminToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWNnbnVxYnkwMDAwOXp6aXdzZWdhcWxsIiwiaWF0IjoxNzUxMTkwMDIzLCJleHAiOjE3NTExOTM2MjN9.ItY8XnKfVXsnGl-vUI67xh9Ma3TTAbYNI9LA3mMtnL0
@agentToken = 

### ========== USER REGISTRATION TESTS ==========

### Register first test user
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "Kimunyi123!",
  "firstName": "Jimmy",
  "lastName": "Kimunyi",
  "phone": "+254704567890",
  "dateOfBirth": "1995-08-10"
}

### Register second test user
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "jkelly911254@gmail.com",
  "password": "Kelly911254!",
  "firstName": "Kelly",
  "lastName": "James",
  "phone": "+254701234567",
  "dateOfBirth": "1998-03-15"
}

### Register third test user
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "eb14.55919.21@student.chuka.ac.ke",
  "password": "@_Kimunyi123!",
  "firstName": "Jimm2",
  "lastName": "Kimunyi",
  "phone": "+254701234567",
  "dateOfBirth": "1998-03-15"
}

### Register with existing email (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "NewPassword123!",
  "firstName": "Duplicate",
  "lastName": "User",
  "phone": "+254709876543"
}

### Register with existing phone (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "newuser@example.com",
  "password": "NewPassword123!",
  "firstName": "New",
  "lastName": "User",
  "phone": "+254704567890"
}

### Register with missing required fields (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "incomplete@test.com",
  "firstName": "Incomplete"
}

### Register with invalid email format (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "invalid-email-format",
  "password": "ValidPass123!",
  "firstName": "Invalid",
  "lastName": "Email",
  "phone": "+254700000000"
}

### Register with weak password - no uppercase (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "weakpass1@test.com",
  "password": "weakpassword123!",
  "firstName": "Weak",
  "lastName": "Password1",
  "phone": "+254700000001"
}

### Register with weak password - no lowercase (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "weakpass2@test.com",
  "password": "WEAKPASSWORD123!",
  "firstName": "Weak",
  "lastName": "Password2",
  "phone": "+254700000002"
}

### Register with weak password - no numbers (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "weakpass3@test.com",
  "password": "WeakPassword!",
  "firstName": "Weak",
  "lastName": "Password3",
  "phone": "+254700000003"
}

### Register with password too short (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "shortpass@test.com",
  "password": "Short1!",
  "firstName": "Short",
  "lastName": "Password",
  "phone": "+254700000004"
}

### Register with invalid phone format (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "invalidphone@test.com",
  "password": "ValidPass123!",
  "firstName": "Invalid",
  "lastName": "Phone",
  "phone": "invalid-phone-format"
}

### Register with firstName too short (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "shortfname@test.com",
  "password": "ValidPass123!",
  "firstName": "A",
  "lastName": "ValidLastName",
  "phone": "+254700000005"
}

### Register with lastName too short (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "shortlname@test.com",
  "password": "ValidPass123!",
  "firstName": "ValidFirstName",
  "lastName": "B",
  "phone": "+254700000006"
}

### Register with invalid date format (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "invaliddate@test.com",
  "password": "ValidPass123!",
  "firstName": "Invalid",
  "lastName": "Date",
  "phone": "+254700000007",
  "dateOfBirth": "invalid-date-format"
}

### ========== LOGIN TESTS ==========

### Login with Admin - valid credentials
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "jkkimunyi@gmail.com",
  "password": "@_Kimunyi123!"
}

### Login with second user - valid credentials

POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "password": "Kimunyi123!"
}

### Login with second user - valid credentials
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "jkelly911254@gmail.com",
  "password": "Kelly911254!"
}

### Login with remember me option
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "Kimunyi123!",
  "rememberMe": true
}

### Login with invalid credentials (should fail)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "wrongpassword"
}

### Login with non-existent user (should fail)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "nonexistent@test.com",
  "password": "SomePass123!"
}

### Login with empty credentials (should fail)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "",
  "password": ""
}

### Login with invalid email format (should fail)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "invalid-email",
  "password": "ValidPass123!"
}

### ========== RATE LIMITING TESTS ==========

### Test rate limiting - attempt 1
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "wrongpassword"
}

### Test rate limiting - attempt 2
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "wrongpassword"
}

### Test rate limiting - attempt 3
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "wrongpassword"
}

### Test rate limiting - attempt 4
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "wrongpassword"
}

### Test rate limiting - attempt 5 (should trigger lockout)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "wrongpassword"
}

### Test rate limiting - attempt 6 (should be locked)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "Kimunyi123!"
}

### ========== PROTECTED ROUTE TESTS ==========

### Get user profile (requires authentication)
# First login to get access token, then use it here
GET {{baseUrl}}/auth/profile
Authorization: Bearer {{accessToken}}

### Get profile without token (should fail)
GET {{baseUrl}}/auth/profile

### Get profile with invalid token (should fail)
GET {{baseUrl}}/auth/profile
Authorization: Bearer invalid-token-here

### ========== TOKEN REFRESH TESTS ==========

### Refresh tokens with valid refresh token
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}"
}

### Refresh with invalid token (should fail)
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "invalid-refresh-token"
}

### Refresh with empty token (should fail)
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": ""
}

### Test refresh token rotation
# Use a refresh token once
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}"
}

### Try to use the same refresh token again (should fail)
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}"
}

### ========== PASSWORD RESET TESTS ==========

### Forgot password with valid email
POST {{baseUrl}}/auth/forgot-password
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com"
}

### Forgot password with second user email
POST {{baseUrl}}/auth/forgot-password
Content-Type: application/json

{
  "email": "jkelly911254@gmail.com"
}

### Forgot password with non-existent email (should still return success)
POST {{baseUrl}}/auth/forgot-password
Content-Type: application/json

{
  "email": "nonexistent@test.com"
}

### Forgot password with invalid email format (should fail)
POST {{baseUrl}}/auth/forgot-password
Content-Type: application/json

{
  "email": "invalid-email-format"
}

### Reset password with valid token (use valid reset token format)
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "token": "{{resetToken}}",
  "newPassword": "NewPassword123!"
}

### Reset password with invalid token (should fail)
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "token": "invalid-reset-token",
  "newPassword": "NewPassword123!"
}

### Reset password with weak password - no uppercase (should fail)
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "token": "{{resetToken}}",
  "newPassword": "weakpass123!"
}

### Reset password with weak password - no lowercase (should fail)
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "token": "{{resetToken}}",
  "newPassword": "WEAKPASS123!"
}

### Reset password with weak password - no numbers (should fail)
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "token": "{{resetToken}}",
  "newPassword": "WeakPassword!"
}

### Reset password too short (should fail)
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "token": "{{resetToken}}",
  "newPassword": "Weak1!"
}

### ========== EMAIL VERIFICATION TESTS ==========

### Verify email with valid token
GET {{baseUrl}}/auth/verify-email?token=016ccf367c0e1cbff979d7d8c3b9a2a18ffec1040d19718334b4fe63c60196eb

### Verify email with invalid token (should fail)
GET {{baseUrl}}/auth/verify-email?token=invalid-verification-token

### Verify email without token (should fail)
GET {{baseUrl}}/auth/verify-email

### ========== LOGOUT TESTS ==========

### Logout single session
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}"
}

### Logout all sessions
POST {{baseUrl}}/auth/logout-all
Authorization: Bearer {{accessToken}}

### Test accessing protected route after logout (should fail)
GET {{baseUrl}}/auth/profile
Authorization: Bearer {{accessToken}}

### ========== ADMIN SETUP AND AGENT MANAGEMENT ==========

### Register admin user
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "admin@carental.com",
  "password": "AdminPass123!",
  "firstName": "System",
  "lastName": "Administrator",
  "phone": "+254700000001",
  "dateOfBirth": "1990-01-01"
}

### Login as admin (after manually setting role to ADMIN in database)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "jimmykimunyi@gmail.com",
  "password": "_Kimunyi123!"
}

### ========== AGENT CREATION BY ADMIN ==========

### Create agent user using admin token
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "jimmykimunyi@gmail.com",
  "password": "_Kimunyi123!",
  "firstName": "Kivungi",
  "lastName": "Kimunyi",
  "phone": "+254700000002",
  "dateOfBirth": "1995-08-15",
  "workLocation": "Nairobi Branch",
  "employeeId": "AGT001"
}

### Create second agent
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "agent2@carental.com",
  "password": "AgentPass123!",
  "firstName": "Jane",
  "lastName": "Smith",
  "phone": "+254700000003",
  "dateOfBirth": "1992-03-20",
  "workLocation": "Mombasa Branch",
  "employeeId": "AGT002"
}

### Create third agent for testing
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "agent3@carental.com",
  "password": "Agent3Pass123!",
  "firstName": "Michael",
  "lastName": "Johnson",
  "phone": "+254700000004",
  "dateOfBirth": "1988-11-30",
  "workLocation": "Kisumu Branch",
  "employeeId": "AGT003"
}

### ========== AGENT LOGIN TESTS ==========

### Login with created agent
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "jimmykimunyi@gmail.com",
  "password": "_Kimunyi123!"
}

### Login with second agent
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "agent2@carental.com",
  "password": "AgentPass123!"
}

### Test agent profile access
GET {{baseUrl}}/auth/profile
Authorization: Bearer {{agentToken}}

### Test agent profile with specific agent token
GET {{baseUrl}}/users/profile
Authorization: Bearer {{agentToken}}

### ========== ADMIN AGENT MANAGEMENT ==========

### Get all agents (Admin only)
GET {{baseUrl}}/users/agents
Authorization: Bearer {{adminToken}}

### Get agents with pagination
GET {{baseUrl}}/users/agents?page=1&limit=5&sortBy=firstName&sortOrder=asc
Authorization: Bearer {{adminToken}}

### Get agents with different pagination
GET {{baseUrl}}/users/agents?page=1&limit=2&sortBy=createdAt&sortOrder=desc
Authorization: Bearer {{adminToken}}

### Get all users (Admin only)
GET {{baseUrl}}/users
Authorization: Bearer {{adminToken}}

### Get users with role filter (Admin only)
GET {{baseUrl}}/users?role=AGENT
Authorization: Bearer {{adminToken}}

### Get users with role filter for customers
GET {{baseUrl}}/users?role=CUSTOMER
Authorization: Bearer {{adminToken}}

### Update user role (promote customer to agent)
PATCH {{baseUrl}}/users/REPLACE_WITH_USER_ID/role
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "role": "AGENT"
}

### Update user role (demote agent to customer)
PATCH {{baseUrl}}/users/REPLACE_WITH_USER_ID/role
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "role": "CUSTOMER"
}

### Update user role (promote to admin)
PATCH {{baseUrl}}/users/REPLACE_WITH_USER_ID/role
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "role": "ADMIN"
}

### ========== ROLE-BASED ACCESS TESTS ==========

### Test agent trying to create another agent (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
  "email": "unauthorized@test.com",
  "password": "TestPass123!",
  "firstName": "Unauthorized",
  "lastName": "User",
  "phone": "+254700000010"
}

### Test agent trying to access admin routes (should fail)
GET {{baseUrl}}/users/agents
Authorization: Bearer {{agentToken}}

### Test customer trying to create agent (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "email": "customer-attempt@test.com",
  "password": "TestPass123!",
  "firstName": "Customer",
  "lastName": "Attempt",
  "phone": "+254700000011"
}

### Test customer trying to access agent routes (should fail)
GET {{baseUrl}}/users/agents
Authorization: Bearer {{accessToken}}

### Test agent accessing allowed user routes
GET {{baseUrl}}/users
Authorization: Bearer {{agentToken}}

### Test agent accessing specific user by ID
GET {{baseUrl}}/users/REPLACE_WITH_USER_ID
Authorization: Bearer {{agentToken}}

### ========== AGENT CREATION VALIDATION TESTS ==========

### Try to create agent with existing email (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "jimmykimunyi@gmail.com",
  "password": "DuplicateTest123!",  
  "firstName": "Duplicate",
  "lastName": "Email",
  "phone": "+254700000020"
}

### Try to create agent with existing phone (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "newagent@test.com",
  "password": "TestPass123!",
  "firstName": "New",
  "lastName": "Agent",
  "phone": "+254700000002"
}

### Try to create agent with weak password (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "weakpass@test.com",
  "password": "weak",
  "firstName": "Weak",
  "lastName": "Password",
  "phone": "+254700000021"
}

### Try to create agent with invalid email (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "invalid-email",
  "password": "ValidPass123!",
  "firstName": "Invalid",
  "lastName": "Email",
  "phone": "+254700000022"
}

### Try to create agent with invalid phone format (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "invalidphone@test.com",
  "password": "ValidPass123!",
  "firstName": "Invalid",
  "lastName": "Phone",
  "phone": "invalid-phone"
}

### Try to create agent with short first name (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "shortfname@test.com",
  "password": "ValidPass123!",
  "firstName": "A",
  "lastName": "ValidLast",
  "phone": "+254700000023"
}

### Try to create agent with short last name (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "shortlname@test.com",
  "password": "ValidPass123!",
  "firstName": "ValidFirst",
  "lastName": "B",
  "phone": "+254700000024"
}

### ========== AGENT WORKFLOW TESTS ==========

### Complete agent creation and login workflow
# Step 1: Admin creates agent
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "workflow-agent@test.com",
  "password": "WorkflowTest123!",
  "firstName": "Workflow",
  "lastName": "Agent",
  "phone": "+254700000030",
  "workLocation": "Test Branch",
  "employeeId": "AGT999"
}

### Step 2: Agent logs in immediately (no verification needed)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "workflow-agent@test.com",
  "password": "WorkflowTest123!"
}

### Step 3: Agent accesses profile
GET {{baseUrl}}/auth/profile
Authorization: Bearer {{agentToken}}

### Step 4: Agent tries admin function (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
  "email": "should-fail@test.com",
  "password": "ShouldFail123!",
  "firstName": "Should",
  "lastName": "Fail",
  "phone": "+254700000031"
}

### Step 5: Agent accesses allowed user routes
GET {{baseUrl}}/users
Authorization: Bearer {{agentToken}}

### ========== AUTHORIZATION ERROR HANDLING TESTS ==========

### Create agent without admin token (should fail)
POST {{baseUrl}}/users/create-agent
Content-Type: application/json

{
  "email": "no-auth@test.com",
  "password": "NoAuth123!",
  "firstName": "No",
  "lastName": "Auth",
  "phone": "+254700000040"
}

### Create agent with expired token (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer expired-token-here
Content-Type: application/json

{
  "email": "expired@test.com",
  "password": "ExpiredToken123!",
  "firstName": "Expired",
  "lastName": "Token",
  "phone": "+254700000041"
}

### Create agent with invalid token (should fail)
POST {{baseUrl}}/users/create-agent
Authorization: Bearer invalid.jwt.token
Content-Type: application/json

{
  "email": "invalidtoken@test.com",
  "password": "InvalidToken123!",
  "firstName": "Invalid",
  "lastName": "Token",
  "phone": "+254700000042"
}

### ========== ROLE-BASED ACCESS TESTS ==========

### Register admin user (manually set role in database)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "admin@test.com",
  "password": "AdminPass123!",
  "firstName": "Admin",
  "lastName": "User",
  "phone": "+254700000001"
}

### Register agent user (manually set role in database)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "jimmykimunyi@gmail.com",
  "password": "_Kimunyi123!",
  "firstName": "Kivungi",
  "lastName": "Kimunyi",
  "phone": "+254700000002"
}

### ========== AGENT MANAGEMENT BY ADMIN ==========

### Admin views all created agents
GET {{baseUrl}}/users/agents
Authorization: Bearer {{adminToken}}

### Admin can update agent role if needed
PATCH {{baseUrl}}/users/AGENT_USER_ID/role
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "role": "CUSTOMER"
}

### Admin can reactivate agent
PATCH {{baseUrl}}/users/AGENT_USER_ID/activate
Authorization: Bearer {{adminToken}}

### Admin can deactivate agent
PATCH {{baseUrl}}/users/AGENT_USER_ID/deactivate
Authorization: Bearer {{adminToken}}

### Admin can delete agent (careful with this)
DELETE {{baseUrl}}/users/AGENT_USER_ID
Authorization: Bearer {{adminToken}}

### ========== AGENT SELF-MANAGEMENT TESTS ==========

### Agent updates their own profile
PATCH {{baseUrl}}/users/profile
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
  "firstName": "Updated",
  "lastName": "Agent",
  "phone": "+254700000050"
}

### Agent changes their password
PATCH {{baseUrl}}/users/change-password
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
  "currentPassword": "_Kimunyi123!",
  "newPassword": "NewAgentPass123!"
}

### Agent tries to update another user's profile (should fail)
PATCH {{baseUrl}}/users/OTHER_USER_ID
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
  "firstName": "Unauthorized",
  "lastName": "Update"
}

### ========== SECURITY TESTS ==========

### Test SQL injection attempt in login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com'; DROP TABLE users; --",
  "password": "Kimunyi123!"
}

### Test XSS attempt in registration
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "xss@test.com",
  "password": "XssPassword123!",
  "firstName": "<script>alert('xss')</script>",
  "lastName": "User",
  "phone": "+254700000003"
}

### Test malformed JSON (should fail)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com"
  "password": "Kimunyi123!"
}

### Test wrong content type
POST {{baseUrl}}/auth/login
Content-Type: text/plain

email=kimunyijimmy@gmail.com&password=Kimunyi123!

### Test empty request body
POST {{baseUrl}}/auth/login
Content-Type: application/json

{}

### ========== EDGE CASES ==========

### Test case sensitivity in email
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "KIMUNYIJIMMY@GMAIL.COM",
  "password": "Kimunyi123!"
}

### Test login with extra whitespace
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "  kimunyijimmy@gmail.com  ",
  "password": "Kimunyi123!"
}

### Test registration with very long names (should fail if exceeding limits)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "longname@test.com",
  "password": "LongNamePass123!",
  "firstName": "VeryLongFirstNameThatExceedsNormalLengthExpectationsButStillValidForTesting",
  "lastName": "VeryLongLastNameThatExceedsNormalLengthExpectationsButStillValidForTesting",
  "phone": "+254700000004"
}

### Test registration with valid special characters in password
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "specialchars@test.com",
  "password": "Special123!@#$%^&*()",
  "firstName": "Special",
  "lastName": "Characters",
  "phone": "+254700000005"
}

### Test registration with Unicode characters in names
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "unicode@test.com",
  "password": "UnicodePass123!",
  "firstName": "José",
  "lastName": "Müller",
  "phone": "+254700000006"
}

### ========== CORS AND OPTIONS TESTS ==========

### Test CORS preflight request
OPTIONS {{baseUrl}}/auth/login

### Test unsupported HTTP method
PATCH {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "TestPass123!"
}

### ========== INTEGRATION TESTS ==========

### Complete user flow test
# 1. Register new user
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "integration@test.com",
  "password": "Integration123!",
  "firstName": "Integration",
  "lastName": "Test",
  "phone": "+254700000100"
}

### 2. Login with new user
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "integration@test.com",
  "password": "Integration123!"
}

### 3. Access protected profile
GET {{baseUrl}}/auth/profile
Authorization: Bearer {{accessToken}}

### 4. Refresh tokens
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}"
}

### 5. Reset password
POST {{baseUrl}}/auth/forgot-password
Content-Type: application/json

{
  "email": "integration@test.com"
}

### 6. Logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}"
}

### ========== PERFORMANCE TESTS ==========

### Test concurrent login attempts
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "kimunyijimmy@gmail.com",
  "password": "Kimunyi123!"
}

### ========== AGENT SPECIFIC EDGE CASES ==========

### Test agent creation with optional fields
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "optional-fields@test.com",
  "password": "OptionalTest123!",
  "firstName": "Optional",
  "lastName": "Fields",
  "phone": "+254700000060"
}

### Test agent creation with all fields
POST {{baseUrl}}/users/create-agent
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "all-fields@test.com",
  "password": "AllFieldsTest123!",
  "firstName": "All",
  "lastName": "Fields",
  "phone": "+254700000061",
  "dateOfBirth": "1990-05-15",
  "workLocation": "Comprehensive Branch",
  "employeeId": "AGT100"
}

### ========== CLEANUP VERIFICATION ==========

### Final admin verification - view all users
GET {{baseUrl}}/users
Authorization: Bearer {{adminToken}}

### Final admin verification - view all agents
GET {{baseUrl}}/users/agents
Authorization: Bearer {{adminToken}}

### Test final agent login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "jimmykimunyi@gmail.com",
  "password": "_Kimunyi123!"
}